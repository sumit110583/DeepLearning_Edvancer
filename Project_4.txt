import os
import pandas as pd
from sklearn.model_selection import train_test_split
from torchvision import models, transforms
from torch.utils.data import Dataset, DataLoader
from PIL import Image
import torch
import torch.nn as nn
import torch.optim as optim
from tqdm import tqdm

# -----------------------------
# 1. This code below is used to : Dataset Class
# -----------------------------
class DriverDataset(Dataset):
    def __init__(self, df, image_root, transform=None):
        self.df = df.reset_index(drop=True)
        self.image_root = image_root
        self.transform = transform

    def __len__(self):
        return len(self.df)

    def __getitem__(self, idx):
        row = self.df.iloc[idx]
        class_folder = f"c{row['class']}"  # e.g., c0, c1, ..., c9
        img_path = os.path.join(self.image_root, class_folder, row['img'])
        
        if not os.path.exists(img_path):
            raise FileNotFoundError(f"Image not found: {img_path}")
        
        image = Image.open(img_path).convert('RGB')
        if self.transform:
            image = self.transform(image)
        return image, row['class']



# -----------------------------
# 2. This code below is used to : Test Dataset Class
# -----------------------------
class TestDataset(Dataset):
    def __init__(self, img_dir, transform=None):
        self.img_dir = img_dir
        self.image_list = os.listdir(img_dir)
        self.transform = transform

    def __len__(self):
        return len(self.image_list)

    def __getitem__(self, idx):
        img_name = self.image_list[idx]
        img_path = os.path.join(self.img_dir, img_name)
        image = Image.open(img_path).convert('RGB')
        if self.transform:
            image = self.transform(image)
        return image, img_name

# -----------------------------
# 3. This code below is used to Load Data
# -----------------------------
df = pd.read_csv(r"C:\Users\sumitp\OneDrive\Desktop\Deep Learning\Project 4  Distracted Driver MultiAction Classification\state-farm-distracted-driver-detection\driver_imgs_list.csv")
df = df.rename(columns={'classname': 'class', 'filename': 'img'})
df['class'] = df['class'].str.extract(r'(\d)').astype(int)

train_df, val_df = train_test_split(df, test_size=0.2, stratify=df['class'], random_state=42)

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])

train_path = r"C:\Users\sumitp\OneDrive\Desktop\Deep Learning\Project 4  Distracted Driver MultiAction Classification\state-farm-distracted-driver-detection\imgs\train"
test_path = r"C:\Users\sumitp\OneDrive\Desktop\Deep Learning\Project 4  Distracted Driver MultiAction Classification\state-farm-distracted-driver-detection\imgs\test"

train_dataset = DriverDataset(train_df, image_root=train_path, transform=transform)
val_dataset = DriverDataset(val_df, image_root=train_path, transform=transform)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32)

# -----------------------------
# 4. This code below is used to Model Setup
# -----------------------------
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

model = models.resnet18(weights=models.ResNet18_Weights.DEFAULT)
model.fc = nn.Linear(model.fc.in_features, 10)  # 10 driver classes
model = model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=1e-4)

# -----------------------------
# 5. This code below is used to Training Loop
# -----------------------------
def train_model(epochs=10):
    for epoch in range(epochs):
        model.train()
        total_loss = 0
        for images, labels in tqdm(train_loader, desc=f"Epoch {epoch+1}/{epochs}"):
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            output = model(images)
            loss = criterion(output, labels)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        avg_loss = total_loss / len(train_loader)
        print(f"Epoch {epoch+1}, Train Loss: {avg_loss:.4f}")
        evaluate_model()

# -----------------------------
# 6. Evaluation
# -----------------------------
def evaluate_model():
    model.eval()
    correct = total = 0
    with torch.no_grad():
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)
            output = model(images)
            _, preds = torch.max(output, 1)
            correct += (preds == labels).sum().item()
            total += labels.size(0)
    print(f"Validation Accuracy: {100 * correct / total:.2f}%")

# -----------------------------
# 7. This code below is used to Test Predictions & Submission
# -----------------------------
def generate_submission():
    test_dataset = TestDataset(test_path, transform=transform)
    test_loader = DataLoader(test_dataset, batch_size=32)
    
    model.eval()
    preds = []
    img_names = []
    with torch.no_grad():
        for images, names in test_loader:
            images = images.to(device)
            output = model(images)
            _, predicted = torch.max(output, 1)
            preds.extend(predicted.cpu().numpy())
            img_names.extend(names)
    
    submission = pd.DataFrame({'img': img_names, 'label': preds})
    submission.to_csv("submission.csv", index=False)
    print("Submission file saved as submission.csv")

# -----------------------------
# 8. This code below is used to Run Training & Inference
# -----------------------------
if __name__ == '__main__':
    train_model(epochs=10)
    generate_submission()
