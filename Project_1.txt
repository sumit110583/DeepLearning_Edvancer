import pandas as pd
import numpy as np
import torch
import torch.nn as nn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MultiLabelBinarizer
from torch.utils.data import Dataset, DataLoader
from torch.nn.utils.rnn import pad_sequence
from collections import Counter
from tqdm import tqdm
from transformers import BertTokenizer, BertModel

# -----------------------------
# 1. This code below is used to Load and Preprocess Tags
# -----------------------------
tags_df = pd.read_csv(r"C:\Users\sumitp\OneDrive\Desktop\Deep Learning\Project 1  Multiclass Multilabel prediction For stack overflow Questions\stacksample\Answers.csv")  # columns: Id, Tag

# Count top 10 tags
top_tags = tags_df['Tag'].value_counts().nlargest(10).index.tolist()
filtered_tags = tags_df[tags_df['Tag'].isin(top_tags)]

# Map question ID to list of tags
qid_to_tags = filtered_tags.groupby('Id')['Tag'].apply(list).to_dict()

# -----------------------------
# 2. This code below is used to Load Questions (adjust path)
# -----------------------------
questions_df = pd.read_csv(r"C:\Users\sumitp\OneDrive\Desktop\Deep Learning\Project 1  Multiclass Multilabel prediction For stack overflow Questions\stacksample\Questions.csv")  # columns: Id, Title, Body
questions_df['Text'] = questions_df['Title'].fillna('') + ' ' + questions_df['Body'].fillna('')

# Keep only questions with top 10 tags
questions_df = questions_df[questions_df['Id'].isin(qid_to_tags)]
questions_df['Tags'] = questions_df['Id'].apply(lambda x: qid_to_tags[x])

# -----------------------------
# 3. This code below is used to Prepare MultiLabel Targets
# -----------------------------
mlb = MultiLabelBinarizer(classes=top_tags)
Y = mlb.fit_transform(questions_df['Tags'])

# -----------------------------
# 4. This code below is used to Train/Test Split
# -----------------------------
X_train, X_val, y_train, y_val = train_test_split(
    questions_df['Text'], Y, test_size=0.2, random_state=42
)

# -----------------------------
# 5. This code below is used to Dataset and DataLoader
# -----------------------------
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

class QuestionDataset(Dataset):
    def _init_(self, texts, labels, tokenizer, max_len=256):
        self.texts = texts.tolist()
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def _len_(self):
        return len(self.texts)

    def _getitem_(self, idx):
        encoding = self.tokenizer(
            self.texts[idx],
            max_length=self.max_len,
            truncation=True,
            padding='max_length',
            return_tensors='pt'
        )
        return {
            'input_ids': encoding['input_ids'].squeeze(0),
            'attention_mask': encoding['attention_mask'].squeeze(0),
            'labels': torch.tensor(self.labels[idx], dtype=torch.float32)
        }

train_dataset = QuestionDataset(X_train, y_train, tokenizer)
val_dataset = QuestionDataset(X_val, y_val, tokenizer)

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=16)

# -----------------------------
# 6. This code below is used to Model
# -----------------------------
class TagPredictor(nn.Module):
    def _init_(self, num_labels):
        super(TagPredictor, self)._init_()
        self.bert = BertModel.from_pretrained('bert-base-uncased')
        self.classifier = nn.Linear(self.bert.config.hidden_size, num_labels)

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        cls_output = outputs.last_hidden_state[:, 0, :]  # [CLS] token
        logits = self.classifier(cls_output)
        return logits

model = TagPredictor(num_labels=len(top_tags))
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model.to(device)

# -----------------------------
# 7. This code below is used to Training Setup
# -----------------------------
criterion = nn.BCEWithLogitsLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=2e-5)

# -----------------------------
# 8. This code below is used to Training Loop
# -----------------------------
def train_model(epochs=3):
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for batch in tqdm(train_loader):
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['labels'].to(device)

            optimizer.zero_grad()
            outputs = model(input_ids, attention_mask)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            total_loss += loss.item()
        print(f"Epoch {epoch+1}, Loss: {total_loss/len(train_loader):.4f}")

# -----------------------------
# 9. This code below is used to Evaluation
# -----------------------------
def evaluate():
    model.eval()
    all_preds, all_labels = [], []
    with torch.no_grad():
        for batch in val_loader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['labels'].cpu().numpy()
            outputs = model(input_ids, attention_mask)
            preds = torch.sigmoid(outputs).cpu().numpy() > 0.5
            all_preds.append(preds)
            all_labels.append(labels)
    # Here you can add metrics like F1 score, precision, recall, etc.

# -----------------------------
# 10. Run
# -----------------------------
if __name__ == '__main__':
    train_model(epochs=3)
    evaluate()